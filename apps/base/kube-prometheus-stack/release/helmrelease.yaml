apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  chart:
    spec:
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
      version: 75.3.3
  interval: 15m
  values:
    crds:
      enabled: true
    # Managed in standalone chart
    grafana:
      enabled: true
      serviceMonitor:
        enabled: true
      persistence:
        enabled: false
      envFromSecrets:
        - name: grafana-oidc
      grafana.ini:
        server:
          root_url: https://grafana.j6n.dev
        # OIDC
        auth:
          signout_redirect_url: https://auth.j6n.ca/application/o/grafana/end-session/
          disable_login_form: true
          oauth_allow_insecure_email_lookup: true

        auth.generic_oauth:
          name: authentik
          enabled: true
          scopes: openid email profile
          auth_url: https://auth.j6n.ca/application/o/authorize/
          token_url: https://auth.j6n.ca/application/o/token/
          api_url: https://auth.j6n.ca/application/o/userinfo/
          # Map user groups to Grafana roles
          role_attribute_path: contains(groups[*], 'grafana_admin') && 'Admin' || contains(groups[*], 'grafana_editor') && 'Editor' || 'Viewer'
        # Enable public viewer
        auth.anonymous:
          enabled: true
          org_name: Main Org.
          org_role: Viewer
          hide_version: true
      # Use an existing secret for the admin user.
      admin:
        ## Name of the secret. Can be templated.
        existingSecret: "grafana-admin"
        userKey: admin_user
        passwordKey: admin_password
      # Plugins
      plugins: []

      ## Configure grafana datasources
      ## ref: http://docs.grafana.org/administration/provisioning/#datasources
      # datasources:
      #   datasources.yaml:
      #     apiVersion: 1
      #     datasources:
      #     - name: Prometheus
      #       type: prometheus
      #       url: http://prometheus-server.prometheus
      #       access: proxy
      #       isDefault: true

      ## NOTE: To use dashboards you must also enable/configure dashboardProviders
      ## ref: https://grafana.com/dashboards
      ## dashboards per provider, use provider name as key.
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - name: default
              orgId: 1
              folder: ""
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/default
            - name: system
              orgId: 1
              folder: System
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/system      
            - name: kubernetes
              orgId: 1
              folder: Kubernetes
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /var/lib/grafana/dashboards/kubernetes
      dashboards:
        system:
          gatus:
            url: https://raw.githubusercontent.com/j6nca/homelab-cluster/refs/heads/main/dashboards/gatus.json
            datasource: Prometheus
      forceDeployDashboards: true
      sidecar:
        dashboards:
          annotations:
            grafana_folder: Kubernetes

    kubeStateMetrics:
      enabled: true
    nodeExporter:
      enabled: true
    windowsMonitoring:
      enabled: false
    
    prometheus:
      prometheusSpec:
        serviceMonitorSelectorNilUsesHelmValues: false
        retention: "15d"
